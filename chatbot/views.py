from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
import json, os
from django.conf import settings
from openai import OpenAI

client = OpenAI(api_key=settings.OPENAI_API_KEY)

def load_card_data():
    path = os.path.join(settings.BASE_DIR, 'chatbot', 'data', 'tarot_cards.json')
    with open(path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    card_dict = {}
    for i, card in enumerate(data):
        card_dict[str(i + 1)] = {
            "name": card["name"],
            "meaning": card.get("upright_meaning", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        }
    return card_dict

def reset_chat(request):
    request.session.flush()
    return redirect('chatbot:index')

def get_card_image_filename(name):
    special_cases = {
        "The Judgement": "Judgement.jpg",
        # Add more if needed
    }
    return f"chatbot/{special_cases.get(name, name.replace(' ', '_') + '.jpg')}"

@csrf_exempt
def index(request):
    CARD_DATA = load_card_data()

    if 'chat_history' not in request.session:
        request.session['chat_history'] = []
        request.session['has_drawn'] = False
        request.session['selected_cards'] = []
        request.session['question_count'] = 0

    drawn_cards_info = []

    if request.method == 'POST':
        selected = request.POST.getlist('selected_cards')
        
        if len(selected) == 10:
            request.session['selected_cards'] = selected
            request.session['has_drawn'] = True

            celtic_cross_positions = [
                {"label": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "description": "‡πÑ‡∏û‡πà‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"},
                {"label": "‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢", "description": "‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç"},
                {"label": "‡∏≠‡∏î‡∏µ‡∏ï", "description": "‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"},
                {"label": "‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", "description": "‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ"},
                {"label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ", "description": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ"},
                {"label": "‡∏à‡∏¥‡∏ï‡πÉ‡∏ï‡πâ‡∏™‡∏≥‡∏ô‡∏∂‡∏Å", "description": "‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏¥‡∏ï‡πÉ‡∏ï‡πâ‡∏™‡∏≥‡∏ô‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"},
                {"label": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "description": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"},
                {"label": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å", "description": "‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"},
                {"label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ß", "description": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ß‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ß‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"},
                {"label": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "description": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"}
            ]

            orientations = ['upright'] * 10  # Static upright orientation

            selected_cards_info = [
                {
                    "position": celtic_cross_positions[i]["label"],
                    "position_description": celtic_cross_positions[i]["description"],
                    "card": CARD_DATA.get(card_id, {}),
                    "orientation": orientation,
                    "image": get_card_image_filename(CARD_DATA.get(card_id, {}).get('name', ''))
                }
                for i, (card_id, orientation) in enumerate(zip(selected, orientations))
            ]

            request.session['selected_cards_info'] = selected_cards_info

            summary = "üÉè ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n" + "\n".join([
                f"{i+1}. {card['card'].get('name', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏û‡πà')}"
                for i, card in enumerate(selected_cards_info)
            ])
            request.session['chat_history'].append({
                'role': 'bot',
                'text': summary
            })
            request.session.modified = True
            return redirect('chatbot:index')

        else:
            user_message = request.POST.get('message')
            if user_message:
                request.session['chat_history'].append({'role': 'user', 'text': user_message})

                if not request.session['has_drawn']:
                    request.session['chat_history'].append({
                        'role': 'bot',
                        'text': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà 10 ‡πÉ‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏∞'
                    })

                elif request.session['question_count'] >= 3:
                    request.session['chat_history'].append({
                        'role': 'bot',
                        'text': '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà'
                    })

                else:
                    selected_cards_info = request.session.get('selected_cards_info', [])
                    card_summary = "\n".join([
                        f"{card['position']}: {card['card'].get('name', '')} - {card['card'].get('meaning', '')}"
                        for card in selected_cards_info
                    ])

                    prompt = f"""‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: "{user_message}"

‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏û‡πà 10 ‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Celtic Cross):

{card_summary}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏û‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏á‡πà‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì"""

                    try:
                        response = client.chat.completions.create(
                            model="gpt-4o",  # or "gpt-4"
                            messages=[
                                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"},
                                {"role": "user", "content": prompt}
                            ],
                            temperature=0.7
                        )
                        bot_reply = response.choices[0].message.content.strip()
                    except Exception as e:
                        bot_reply = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {str(e)}"

                    request.session['chat_history'].append({'role': 'bot', 'text': bot_reply})
                    request.session['question_count'] += 1
                    request.session.modified = True

            return redirect('chatbot:index')

    if request.session.get('has_drawn'):
        drawn_cards_info = request.session.get('selected_cards_info', [])

    response = render(request, 'chatbot/chat.html', {
        'chat_history': request.session['chat_history'],
        'show_cards': not request.session.get('has_drawn', False),
        'selected_cards': request.session.get('selected_cards', []),
        'drawn_cards_info': drawn_cards_info,
        'card_range': range(1, 79),
    })

    return response