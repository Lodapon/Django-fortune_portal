from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
import json, os
from django.conf import settings
from openai import OpenAI

client = OpenAI(api_key=settings.OPENAI_API_KEY)

MAX_QUESTIONS = 3
NUM_CARDS = 10

def load_card_data():
    """Load tarot card data from JSON file."""
    path = os.path.join(settings.BASE_DIR, 'chatbot', 'data', 'tarot_cards.json')
    try:
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        data = []
        print(f"Error loading tarot_cards.json: {e}")

    card_dict = {}
    for i, card in enumerate(data):
        card_dict[str(i + 1)] = {
            "name": card.get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏û‡πà"),
            "meaning": card.get("upright_meaning", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        }
    return card_dict

def reset_chat(request):
    """Clear all session data and restart."""
    request.session.flush()
    return redirect('chatbot:index')

def get_card_image_filename(name):
    """Return filename for tarot card image, handling special cases."""
    special_cases = {
        "The Judgement": "Judgement.jpg",
        # Add more special cases here if needed
    }
    if not name:
        return ""
    filename = special_cases.get(name, name.replace(' ', '_') + '.jpg')
    return f"chatbot/{filename}"

CASUAL_RESPONSES = {
    'thx': "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞",
    'thank': "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üòä ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞",
    '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì': "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ üíñ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞",
    '‡∏ö‡∏≤‡∏¢': "‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ üåü",
    'bye': "‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ üåü",
    '‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢': "‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ üí´",
    'love': "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üíï ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å",
    '‡∏î‡∏µ‡∏à‡∏±‡∏á': "‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
    '‡∏ä‡∏≠‡∏ö': "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞ ‚ù§Ô∏è",
    '‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢': "‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ üí°",
    '‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å': "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üßô‚Äç‚ôÄÔ∏è"
}

def detect_casual_message(message):
    message = message.lower()
    for keyword, reply in CASUAL_RESPONSES.items():
        if keyword in message:
            return reply
    return None

@csrf_exempt
def index(request):
    CARD_DATA = load_card_data()

    # Initialize session variables if first visit
    if 'chat_history' not in request.session:
        request.session['chat_history'] = []
        request.session['has_drawn'] = False
        request.session['selected_cards'] = []
        request.session['question_count'] = 0
        request.session['extra_cards_info'] = []
        request.session['extra_cards_suggested'] = False

    if request.method == 'POST':
        action = request.POST.get('action')

        if action == 'draw_extra_cards':
            # Draw 3 new cards that are not already in selected_cards
            already_drawn = request.session.get('selected_cards', [])
            import random
            available_ids = [str(i) for i in range(1, 79) if str(i) not in already_drawn]
            extra_drawn = random.sample(available_ids, 3)

            request.session['extra_drawn_cards'] = extra_drawn  # optional tracking
            CARD_DATA = load_card_data()

            extra_cards_info = [
                {
                    "position": f"‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ö‡∏ó‡∏µ‡πà {i+1}",
                    "position_description": "‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                    "card": CARD_DATA.get(card_id, {}),
                    "orientation": 'upright',
                    "image": get_card_image_filename(CARD_DATA.get(card_id, {}).get('name', ''))
                }
                for i, card_id in enumerate(extra_drawn)
            ]

            request.session['extra_cards_info'] = extra_cards_info
            request.session['chat_history'].append({
                'role': 'bot',
                'text': "üîÆ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 3 ‡πÉ‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
            })
            request.session.modified = True
            return redirect('chatbot:index')   

        # Handle card selection submission
        selected = request.POST.getlist('selected_cards')

        if len(selected) == NUM_CARDS:
            request.session['selected_cards'] = selected
            request.session['has_drawn'] = True

            celtic_cross_positions = [
                {"label": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "description": "‡πÑ‡∏û‡πà‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"},
                {"label": "‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢", "description": "‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç"},
                {"label": "‡∏≠‡∏î‡∏µ‡∏ï", "description": "‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"},
                {"label": "‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", "description": "‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ"},
                {"label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ", "description": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ"},
                {"label": "‡∏à‡∏¥‡∏ï‡πÉ‡∏ï‡πâ‡∏™‡∏≥‡∏ô‡∏∂‡∏Å", "description": "‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏¥‡∏ï‡πÉ‡∏ï‡πâ‡∏™‡∏≥‡∏ô‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"},
                {"label": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "description": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"},
                {"label": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å", "description": "‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"},
                {"label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ß", "description": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ß‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ß‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"},
                {"label": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "description": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"}
            ]

            orientations = ['upright'] * NUM_CARDS  # Static orientation for now

            selected_cards_info = [
                {
                    "position": celtic_cross_positions[i]["label"],
                    "position_description": celtic_cross_positions[i]["description"],
                    "card": CARD_DATA.get(card_id, {}),
                    "orientation": orientation,
                    "image": get_card_image_filename(CARD_DATA.get(card_id, {}).get('name', ''))
                }
                for i, (card_id, orientation) in enumerate(zip(selected, orientations))
            ]

            request.session['selected_cards_info'] = selected_cards_info

            summary = "üÉè ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n" + "\n".join([
                f"{i+1}. {card['card'].get('name', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏û‡πà')}"
                for i, card in enumerate(selected_cards_info)
            ])

            request.session['chat_history'].append({'role': 'bot', 'text': summary})
            request.session.modified = True

            return redirect('chatbot:index')

        else:
            # Handle user questions
            user_message = request.POST.get('message')
            if user_message:
                request.session['chat_history'].append({'role': 'user', 'text': user_message})

                casual_reply = detect_casual_message(user_message)
                if casual_reply:
                    request.session['chat_history'].append({'role': 'bot', 'text': casual_reply})
                    request.session.modified = True
                    return redirect('chatbot:index')  # Skip tarot reading and return polite reply

                if not request.session.get('has_drawn', False):
                    request.session['chat_history'].append({
                        'role': 'bot',
                        'text': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà 10 ‡πÉ‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏∞'
                    })
                else:
                    selected_cards_info = request.session.get('selected_cards_info', [])
                    extra_cards_info = request.session.get('extra_cards_info', [])
                    all_cards_info = selected_cards_info + extra_cards_info

                    # # Suggest drawing extra cards after 3rd question
                    # if request.session.get('question_count', 0) == 3 and not request.session.get('extra_cards_suggested', False):
                    #     request.session['chat_history'].append({
                    #         'role': 'bot',
                    #         'text': 'üÉè ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 3 ‡πÉ‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô'
                    #     })
                    #     request.session['extra_cards_suggested'] = True

                    # Build card summary from all drawn cards
                    card_summary = "\n".join([
                        f"{card['position']}: {card['card'].get('name', '')} - {card['card'].get('meaning', '')}"
                        for card in all_cards_info
                    ])

                    prompt = f"""‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: "{user_message}"

‡πÑ‡∏û‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡∏£‡∏ß‡∏°‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):

{card_summary}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏û‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏á‡πà‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì"""

                    try:
                        response = client.chat.completions.create(
                            # model="gpt-4o",
                            model="gpt-3.5-turbo",
                            messages=[
                                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"},
                                {"role": "user", "content": prompt}
                            ],
                            temperature=0.7,
                            max_tokens=800,
                        )
                        bot_reply = response.choices[0].message.content.strip()
                    except Exception as e:
                        bot_reply = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {str(e)}"

                    request.session['chat_history'].append({'role': 'bot', 'text': bot_reply})
                    request.session['question_count'] = request.session.get('question_count', 0) + 1
                    request.session.modified = True

            return redirect('chatbot:index')

    # If GET or no POST redirect
    drawn_cards_info = request.session.get('selected_cards_info', []) if request.session.get('has_drawn', False) else []

    return render(request, 'chatbot/chat.html', {
        'chat_history': request.session.get('chat_history', []),
        'show_cards': not request.session.get('has_drawn', False),
        'selected_cards': request.session.get('selected_cards', []),
        'drawn_cards_info': drawn_cards_info,
        'extra_cards_info': request.session.get('extra_cards_info', []),
        'card_range': range(1, 79),
    })